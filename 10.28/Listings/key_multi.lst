C51 COMPILER V9.54   KEY_MULTI                                                             11/04/2024 22:25:25 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE KEY_MULTI
OBJECT MODULE PLACED IN .\Objects\key_multi.obj
COMPILER INVOKED BY: E:\Keil5\C51\BIN\C51.EXE key_multi.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\key_multi.lst) OBJECT(.\Objects\key_multi.obj)

line level    source

   1          #include <key_multi.h>
   2          
   3          //uchar temp;
   4          
   5          unsigned char keyscan()
   6          {
   7   1              unsigned char keynumber;
   8   1              if(!KEY1) keynumber = 1;                                                                        //£¡£¡£¡ÐÞ¸Ä´Ë´¦£¬¿ÉÒÔÔö¼Ó/¼õÉÙ°´¼üÊýÁ¿
   9   1              else if(!KEY2) keynumber = 2;                                                   //£¡£¡£¡ÐÞ¸Ä´Ë´¦£¬¿ÉÒÔÔö¼Ó/¼õÉÙ°´¼üÊýÁ¿
  10   1              else if(!KEY3) keynumber = 3;                                                   //£¡£¡£¡ÐÞ¸Ä´Ë´¦£¬¿ÉÒÔÔö¼Ó/¼õÉÙ°´¼üÊýÁ¿
  11   1              else if(!KEY4) keynumber = 4;                                                   //£¡£¡£¡ÐÞ¸Ä´Ë´¦£¬¿ÉÒÔÔö¼Ó/¼õÉÙ°´¼üÊýÁ¿
  12   1              else keynumber = 0;
  13   1              return keynumber;
  14   1      }
  15          
  16          unsigned char key_multi(void)
  17          {
  18   1              static uchar key_state;                                                                         //°´¼ü×´Ì¬±äÁ¿
  19   1              static uint key_time;                                                                           //°´¼ü¼ÆÊ±±äÁ¿
  20   1              static uchar key_press_nums;                                                    //°´¼ü´ÎÊý±äÁ¿          
  21   1              static uint key_time_double;                                                    //°´¼üË«»÷Ê±¼ä
  22   1              static uchar keynum;                                                                                    //¼üÖµ
  23   1              static uchar new_keynum;                                                                        //ÐÂµÄ¼üÖµ
  24   1              uchar key_press, key_return;                                                    //¼üÖµºÍ·µ»ØÖµ
  25   1              
  26   1              key_return = 0;                                                                         //Çå³ý·µ»Ø°´¼üÖµ
  27   1              
  28   1              switch(keyscan())
  29   1              {
  30   2                      case 1:key_press = KEY1;new_keynum = 1;break;           
  31   2                      case 2:key_press = KEY2;new_keynum = 2;break;           
  32   2                      case 3:key_press = KEY3;new_keynum = 3;break;           
  33   2                      case 4:key_press = KEY4;new_keynum = 4;break;           
  34   2                      default:key_press = 1;break;
  35   2              }
  36   1              if(key_press_nums > 0)                                                                          //°´¼ü´ÎÊý´óÓÚ0£¬ËµÃ÷ÓÐ°´¼ü
  37   1              {
  38   2                      key_time_double++;                                                                                      //Ë«»÷¼ÆÊ±
  39   2                      if(key_time_double >= DOUBLE_KEY_TIME && key_time_double < LONG_KEY_TIME) key_state = KEY_STATE_2;//ÔÚ³¤
             -°´Ê±¼äºÍË«»÷Ê±¼äÉè¶¨·¶Î§ÄÚ£¬µ½×´Ì¬2
  40   2              }
  41   1              
  42   1              switch (key_state)
  43   1              {
  44   2                      case KEY_STATE_0:                                                                                       //°´¼ü×´Ì¬0£ºÅÐ¶ÏÓÐÎÞ°´¼ü°´ÏÂ
  45   2                      {
  46   3                              if (!key_press)                                                                                         //ÓÐ°´¼ü°´ÏÂ
  47   3                              {
  48   4                                      key_time = 0;                                                                                   //ÇåÁãÊ±¼ä¼ä¸ô¼ÆÊý
  49   4                                      key_state = KEY_STATE_1;                                                //È»ºó½øÈë °´¼ü×´Ì¬1
  50   4                              }
  51   3                      }break;
  52   2                      case KEY_STATE_1:                                                                                       //°´¼ü×´Ì¬1£ºÈí¼þÏû¶¶(È·¶¨°´¼üÊÇ·ñÓÐÐ§£¬¶ø²»ÊÇÎó´¥)¡£°´¼üÓÐÐ§µÄ¶¨Òå£º°´¼ü³Ö
             -Ðø°´ÏÂ³¬¹ýÉè¶¨µÄÏû¶¶Ê±¼ä¡£
C51 COMPILER V9.54   KEY_MULTI                                                             11/04/2024 22:25:25 PAGE 2   

  53   2                      {
  54   3                              if (!key_press)
  55   3                              {
  56   4                                      key_time++;                                                                                             //Ò»´Î10ms
  57   4                                      if(key_time>=SINGLE_KEY_TIME)                   //Ïû¶¶Ê±¼äÎª£ºSINGLE_KEY_TIME*10ms = 10ms;
  58   4                                      {
  59   5                                              key_state = KEY_STATE_2;                                        //Èç¹û°´¼üÊ±¼ä³¬¹ý Ïû¶¶Ê±¼ä£¬¼´ÅÐ¶¨Îª°´ÏÂµÄ°´¼üÓÐÐ§¡£½øÈë°´¼ü×´Ì¬2£¬¼ÌÐ
             -øÅÐ¶¨µ½µ×ÊÇµ¥»÷¡¢Ë«»÷»¹ÊÇ³¤°´
  60   5                                              key_press_nums++;                                                                       //°´¼ü´ÎÊý+1
  61   5                                      }
  62   4                              }
  63   3                              else key_state = KEY_STATE_0;                           //Èç¹û°´¼üÊ±¼äÃ»ÓÐ³¬¹ý£¬ÅÐ¶¨ÎªÎó´¥£¬°´¼üÎÞÐ§£¬·µ»Ø °´¼ü×´Ì¬0£¬¼ÌÐøµÈ´
             -ý°´¼ü
  64   3                      }break;
  65   2                      case KEY_STATE_2:                                                                                       //°´¼ü×´Ì¬2£ºÅÐ¶¨°´¼üÓÐÐ§µÄÖÖÀà£ºÊÇµ¥»÷£¬Ë«»÷£¬»¹ÊÇ³¤°´
  66   2                      {
  67   3                              if(key_press)                                                                                           //Èç¹û°´¼üÔÚ Éè¶¨µÄË«»÷Ê±¼äÄÚÊÍ·Å£¬ÔòÅÐ¶¨Îªµ¥»÷/Ë«»÷
  68   3                              {
  69   4                                      if(key_time_double < 50 ) key_state = KEY_STATE_0;                                                      //Ë«»÷Ê±¼ä´ïµ½Ç°£¬ÔÙ´ÎÉ¨Ãè°´¼ü
  70   4                                      if(key_time_double >= 50 && key_time_double < 80)       //´ïµ½Ë«»÷Éè¶¨Ê±¼äºó
  71   4                                      {
  72   5                                              if(key_press_nums == 1) 
  73   5                                                      key_return = Single_click + new_keynum*10;                              //·µ»ØÓÐÐ§°´¼üÖµ£ºµ¥»÷
  74   5                                              else if(key_press_nums ==2 && new_keynum == keynum) 
  75   5                                                      key_return = Double_click + new_keynum*10;      //·µ»ØÓÐÐ§°´¼üÖµ£ºË«»÷
  76   5                                              key_state = KEY_STATE_0;                                        //·µ»Ø °´¼ü×´Ì¬0£¬¼ÌÐøµÈ´ý°´¼ü
  77   5                                              key_press_nums = 0;                                                             //Çå¿Õ°´¼ü´ÎÊý
  78   5                                              key_time_double = 0;                                                    //Çå¿ÕË«»÷¼ÆÊ±
  79   5                                      }
  80   4                              }
  81   3                              else
  82   3                              {       
  83   4                                      key_time++;                                                                                                     //°´¼üÒ»Ö±°´×ÅµÄ»°£¬³¤°´¼ÆÊ±
  84   4                                      if(key_time >= LONG_KEY_TIME)                   //Èç¹û°´¼üÊ±¼ä³¬¹ý Éè¶¨µÄ³¤°´Ê±¼ä(LONG_KEY_TIME*10ms=80*10ms=800ms), 
             -ÔòÅÐ¶¨Îª ³¤°´
  85   4                                      {
  86   5                                              key_return = Long_click + new_keynum*10;        //·µ»ØÓÐÐ§¼üÖµÖµ£º³¤°´
  87   5                                              key_state = KEY_STATE_3;                                        //È¥×´Ì¬3£¬µÈ´ý°´¼üÊÍ·Å
  88   5                                      }
  89   4                              }
  90   3                      }break;
  91   2                      case KEY_STATE_3:                                                                                       //µÈ´ý°´¼üÊÍ·Å
  92   2                      {
  93   3                              if (key_press)
  94   3                              {
  95   4                                      key_state = KEY_STATE_0;                                                //°´¼üÊÍ·Åºó£¬½øÈë °´¼ü×´Ì¬0 £¬½øÐÐÏÂÒ»´Î°´¼üµÄÅÐ¶¨
  96   4                                      key_press_nums = 0;                                                                     //Çå¿Õ°´¼ü´ÎÊý
  97   4                                      key_time_double = 0;                                                            //Çå¿ÕË«»÷¼ÆÊ±
  98   4                              }
  99   3                      }break;
 100   2                      default:key_state = KEY_STATE_0;break;  //ÌØÊâÇé¿ö£ºkey_stateÊÇÆäËûÖµµÃÇé¿ö£¬ÇåÁãkey_state¡£ÕâÖÖÇé¿öÒ»°ã³
             -öÏÖÔÚ Ã»ÓÐ³õÊ¼»¯key_state£¬µÚÒ»´ÎÖ´ÐÐÕâ¸öº¯ÊýµÄÊ±ºò
 101   2              }
 102   1              keynum = new_keynum;                                                                                    //½«ÐÂ»ñÈ¡µÄ¼üÖµ¸³Öµ¸ø¼üÖµ
 103   1              return key_return;                                                                                              //·µ»Ø °´¼üÖµ
 104   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    420    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
C51 COMPILER V9.54   KEY_MULTI                                                             11/04/2024 22:25:25 PAGE 3   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
